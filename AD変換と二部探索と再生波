# 必要なライブラリをインポート
import numpy as np
import matplotlib.pyplot as plt

# パラメータ設定
VDD = 1.0  # VDD = 1.0V
fs = 10000  # サンプリング周波数 (Hz)
f = 50  # サイン波の周波数 (Hz)
duration = 0.02  # 期間 (s)
steps = int(fs * duration)  # サンプル数
t = np.linspace(0, duration, steps, endpoint=False)  # 時間配列

# 入力信号（バイアス0.5、振幅0.5のサイン波）
Vin_signal = 0.5 + 0.5 * np.sin(2 * np.pi * f * t)

# SAR ADC の変換処理 (8ビット量子化)
def sar_adc(Vin_signal, VDD, num_bits=8):
    levels = 2**num_bits  # 量子化レベル (8ビットなら 256)
    quantized_values = np.round((Vin_signal / VDD) * (levels - 1)).astype(int)  # 量子化
    bit_sequences = [format(qv, f'0{num_bits}b') for qv in quantized_values]  # バイナリー変換
    decimal_values = [int(bits, 2) for bits in bit_sequences]  # 10進数変換

    return quantized_values, bit_sequences, decimal_values

# SAR ADC による変換
quantized_values, bit_sequences, decimal_values = sar_adc(Vin_signal, VDD)

# 10進数の時間軸を作成（サンプリング点ごとに対応）
t_decimal = t

# プロット
fig, axs = plt.subplots(2, 1, figsize=(10, 6))

# 入力サイン波のプロット
axs[0].plot(t, Vin_signal, label="Input Sine Wave", color='blue')
axs[0].scatter(t, Vin_signal, color='red', label="Sampled Points", zorder=3)
axs[0].set_xlabel("Time [s]")
axs[0].set_ylabel("Voltage [V]")
axs[0].set_title("Input Sine Wave (Sampled at fs)")
axs[0].grid()
axs[0].legend()

# 10進数のプロット
axs[1].step(t_decimal, decimal_values, where='post', label="Decimal Representation", color='green')
axs[1].set_xlabel("Time [s]")
axs[1].set_ylabel("Decimal Value (8-bit)")
axs[1].set_title("8-bit Quantized Values in Decimal")
axs[1].grid()
axs[1].legend()

plt.tight_layout()
plt.show()
