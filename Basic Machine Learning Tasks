import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier

# 応用例: 機械学習タスクをシンプルにまとめる

# 1. 画像認識 (ダミーデータを用いた分類)
def image_recognition():
    X = np.random.rand(100, 64*64)  # 画像を64x64のピクセルにフラット化
    y = np.random.randint(0, 2, 100)  # 2クラス (例: ナンバープレート認識)
    model = RandomForestClassifier()
    model.fit(X, y)
    predictions = model.predict(X)
    print("Image Recognition Accuracy:", accuracy_score(y, predictions))

# 2. 音声認識 (シンプルな分類モデル)
def speech_recognition():
    X = np.random.rand(100, 20)  # 特徴量 (例: 音声スペクトル)
    y = np.random.randint(0, 2, 100)  # 2クラス (例: 音声コマンド)
    model = LogisticRegression()
    model.fit(X, y)
    predictions = model.predict(X)
    print("Speech Recognition Accuracy:", accuracy_score(y, predictions))

# 3. 自然言語処理 (NLP: 文書分類)
def text_classification():
    X = np.random.rand(100, 50)  # 特徴量 (例: 単語ベクトル)
    y = np.random.randint(0, 2, 100)  # 2クラス (例: ポジティブ vs ネガティブ)
    model = LogisticRegression()
    model.fit(X, y)
    predictions = model.predict(X)
    print("Text Classification Accuracy:", accuracy_score(y, predictions))

# 4. 予測 (株価予測)
def stock_prediction():
    X = np.linspace(1, 100, 100).reshape(-1, 1)  # 株価の時系列データ
    y = X.flatten() * 1.5 + np.random.randn(100) * 10  # ランダムな傾向
    model = RandomForestClassifier()
    model.fit(X, (y > y.mean()).astype(int))
    predictions = model.predict(X)
    print("Stock Prediction (Binary) Accuracy:", accuracy_score((y > y.mean()).astype(int), predictions))

# 5. 異常検知 (クラスターから外れたデータを検知)
def anomaly_detection():
    X = np.random.rand(100, 2)  # 特徴量 (例: センサーデータ)
    model = KMeans(n_clusters=2)
    model.fit(X)
    predictions = model.predict(X)
    print("Anomaly Detection Clusters:", np.unique(predictions))

# 6. レコメンド (ユーザー×アイテム行列)
def recommendation():
    user_item_matrix = np.random.rand(10, 5)  # ユーザー×アイテム行列
    scaler = StandardScaler()
    user_item_matrix_scaled = scaler.fit_transform(user_item_matrix)
    recommendations = user_item_matrix_scaled.mean(axis=0)
    print("Recommended Items:", np.argsort(-recommendations))

# 7. 強化学習 (シンプルな状態価値モデル)
def reinforcement_learning():
    states = np.random.rand(10)  # 状態の値
    actions = np.random.choice([0, 1], size=10)  # 行動 (例: 左右)
    rewards = states * actions  # 簡単な報酬
    print("State-Action Rewards:", rewards)

# すべての関数を実行
image_recognition()
speech_recognition()
text_classification()
stock_prediction()
anomaly_detection()
recommendation()
reinforcement_learning()
