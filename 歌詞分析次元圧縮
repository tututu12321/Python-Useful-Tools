import matplotlib.pyplot as plt
from transformers import pipeline
from sklearn.decomposition import PCA
import numpy as np
import matplotlib

# Set font for correct display (use for displaying non-English text)
matplotlib.rcParams['font.family'] = 'IPAexGothic'

# English text
text = [
    "The end of the world will probably feel like this, dull and boring. I went out to buy the new album of that band and some milk.",
    "The two people I met five minutes ago are now whispering in bed, turning off the useless TV, and talking about the beginning and the end of things.",
    "Summer passed so quickly, but baby, la la la la la la, my heart is racing.",
    "That sentimentality might one day destroy you, the addict of nostalgia, showing withdrawal symptoms, running to the movie theater.",
    "But somehow, I feel like I can do it. I think I have to do it, because if I don't, nothing will happen. Where is this helpless body going?"
]

# Set up sentiment analysis pipeline (use a multilingual model)
sentiment_analyzer = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# Prepare the sentiment vectors
sentiment_vectors = []
for sentence in text:
    result = sentiment_analyzer(sentence)
    sentiment_score = result[0]['score']
    
    # Extract sentiment for both positive and negative
    # Positive score
    positive_score = sentiment_score if result[0]['label'] in ['5 stars', '4 stars'] else 0
    # Negative score
    negative_score = sentiment_score if result[0]['label'] in ['1 star', '2 stars', '3 stars'] else 0
    
    sentiment_vectors.append([positive_score, negative_score])

# Convert the sentiment vectors to a NumPy array for PCA
sentiment_vectors = np.array(sentiment_vectors)

# Apply PCA to reduce dimensions to 2D
pca = PCA(n_components=2)
reduced_vectors = pca.fit_transform(sentiment_vectors)

# Plot the 2D vectors
fig, ax = plt.subplots()
for i, (x, y) in enumerate(reduced_vectors):
    ax.scatter(x, y, c='blue' if sentiment_vectors[i][0] > sentiment_vectors[i][1] else 'red', marker='o')
    ax.text(x, y, f"{i+1}", fontsize=9, ha='left', va='top')

# Set graph labels and title
ax.set_xlabel('PCA Component 1')
ax.set_ylabel('PCA Component 2')
ax.set_title('Sentiment Analysis Results (2D PCA)')

# Display the plot
plt.tight_layout()
plt.show()

# Print sentiment analysis results below the plot
for i, sentence in enumerate(text):
    positive_score = sentiment_vectors[i][0]
    negative_score = sentiment_vectors[i][1]
    print(f"Sentence {i+1}:")
    print(f"Sentence: {sentence}")
    print(f"Positive Sentiment: {positive_score}, Negative Sentiment: {negative_score}")
    print(f"PCA Coordinates: ({reduced_vectors[i][0]}, {reduced_vectors[i][1]})\n")
