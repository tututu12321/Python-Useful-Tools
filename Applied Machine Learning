import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.datasets import make_classification
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import NearestNeighbors
from sklearn.ensemble import IsolationForest
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
import seaborn as sns

# ====================================
# 1. 回帰アルゴリズム：不動産価格を予測
np.random.seed(42)
X = np.random.rand(100, 1) * 100  # 住宅面積（100～1000平方メートル）
y = 50000 + X * 1500 + np.random.randn(100, 1) * 10000  # 価格（基本価格 + ノイズ）

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

plt.scatter(X_test, y_test, color='blue', label='Actual Prices')
plt.plot(X_test, y_pred, color='red', label='Predicted Prices')
plt.xlabel('Housing Area (sq.m.)')
plt.ylabel('Price ($)')
plt.legend()
plt.title("Real Estate Price Prediction")
plt.show()

# ====================================
# 2. 分類アルゴリズム：社員の退職を予測
X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, n_classes=2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print(f"Classification Accuracy: {accuracy_score(y_test, y_pred)}")

# ====================================
# 3. 時系列予測アルゴリズム：商品の売上を予測
months = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).reshape(-1, 1)
sales = np.array([200, 220, 240, 250, 270, 300, 320, 350, 380, 400, 420, 450])

model = LinearRegression()
model.fit(months, sales)
sales_pred = model.predict(months)

plt.plot(months, sales, label='Actual Sales')
plt.plot(months, sales_pred, label='Predicted Sales', linestyle='--')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.legend()
plt.title("Sales Forecasting")
plt.show()

# ====================================
# 4. レコメンドアルゴリズム：個人の趣向に沿った商品をオススメ
X = np.array([[5, 10], [10, 15], [15, 20], [20, 25], [25, 30]])  # 商品の特徴（例: 価格、評価）
product_to_recommend = np.array([[10, 12]])  # おすすめしたい商品

model = NearestNeighbors(n_neighbors=2)
model.fit(X)
distances, indices = model.kneighbors(product_to_recommend)

print("Recommended products indices:", indices)

# ====================================
# 5. 異常検知アルゴリズム：ポンプの故障を検知
X = np.array([[1, 2], [2, 3], [3, 4], [100, 200], [5, 6], [6, 7]])  # 異常データも含む

model = IsolationForest(contamination=0.2)
model.fit(X)
predictions = model.predict(X)

print("Anomaly Detection Results:", predictions)

# ====================================
# 6. テキストデータ：商品の口コミを分析
reviews = ["Great product, loved it!", "Terrible quality, do not buy", "I am satisfied with this purchase", "Worst purchase ever"]
labels = [1, 0, 1, 0]  # 1 = Positive, 0 = Negative

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(reviews)

model = MultinomialNB()
model.fit(X, labels)

new_review = ["Awesome item, works perfectly"]
new_review_vec = vectorizer.transform(new_review)
prediction = model.predict(new_review_vec)
print("Prediction for new review:", "Positive" if prediction == 1 else "Negative")

# ====================================
# 7. 画像データ：画像を識別
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

x_train = x_train / 255.0
x_test = x_test / 255.0

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'\nTest accuracy: {test_acc}')

plt.imshow(x_test[0])
plt.show()
prediction = model.predict(np.expand_dims(x_test[0], axis=0))
print("Predicted label:", np.argmax(prediction))
