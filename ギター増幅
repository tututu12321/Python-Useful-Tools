import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

# ギターの信号（サイン波）の生成
def generate_guitar_signal(frequency=440, duration=2, sampling_rate=10000):
    t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
    signal = np.sin(2 * np.pi * frequency * t)
    return t, signal

# プリアンプ（信号の増幅）
def preamp(signal, gain=5):
    return signal * gain

# EQ処理（バンドパスフィルタを使用して特定の周波数帯域を通過させる）
def bandpass_filter(signal, lowcut=100, highcut=2000, sampling_rate=10000, order=6):
    nyquist = 0.5 * sampling_rate  # ナイキスト周波数
    low = lowcut / nyquist  # 周波数を正規化
    high = highcut / nyquist  # 周波数を正規化
    
    # 正規化された周波数が範囲内にあるか確認
    if low <= 0 or high >= 1:
        raise ValueError(f"Invalid filter range: {lowcut} Hz to {highcut} Hz")
    
    b, a = butter(order, [low, high], btype='band')
    filtered_signal = lfilter(b, a, signal)
    return filtered_signal

# パワーアンプ（信号の最終的な増幅）
def power_amp(signal, gain=10):
    return signal * gain

# スピーカー（電気信号を音波に変換する部分はシミュレーションとして省略）
# 通常、スピーカーは信号の電力を音波に変換しますが、ここでは単純に信号をプロットします。

# 信号の生成
t, guitar_signal = generate_guitar_signal()

# プリアンプ処理
preamp_signal = preamp(guitar_signal)

# EQ処理（バンドパスフィルタ）
filtered_signal = bandpass_filter(preamp_signal)

# パワーアンプ処理
final_signal = power_amp(filtered_signal)

# プロット
plt.figure(figsize=(12, 10))

# オリジナル信号（ギターのサイン波）
plt.subplot(5, 1, 1)
plt.plot(t, guitar_signal, label='Original Guitar Signal', color='blue')
plt.title('Original Guitar Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()

# プリアンプ処理後の信号
plt.subplot(5, 1, 2)
plt.plot(t, preamp_signal, label='Preamp Signal', color='green')
plt.title('Preamp Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()

# EQ処理後の信号
plt.subplot(5, 1, 3)
plt.plot(t, filtered_signal, label='EQ Processed Signal', color='orange')
plt.title('EQ Processed Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()

# パワーアンプ処理後の信号
plt.subplot(5, 1, 4)
plt.plot(t, final_signal, label='Power Amp Signal', color='red')
plt.title('Power Amp Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()

# スピーカー出力信号（ここでは単に最終信号を表示）
plt.subplot(5, 1, 5)
plt.plot(t, final_signal, label='Speaker Output Signal', color='purple')
plt.title('Speaker Output Signal (Simulated)')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()

# グラフを表示
plt.tight_layout()
plt.show()
