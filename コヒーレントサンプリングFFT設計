import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
import math

# シミュレーションパラメータ
N = 10  # FFTのサンプル数の指数
FS = 2 ** N  # サンプリング周波数
FS_period = 1 / FS  # サンプリング周波数の周期
Fin = 17  # 入力サイン波の周波数 (Hz)
Fin_period = 1 / Fin  # 入力サイン波の周期

# 2^n ± 1 が 2^N と互いに素になるものを求める
coprime_candidates = []
coprime_periods = []
for n in range(1, N+1):
    for delta in [-1, 1]:
        candidate = 2 ** n + delta
        if math.gcd(candidate, FS) == 1:
            coprime_candidates.append(candidate)
            coprime_periods.append(1 / candidate)  # 周期を計算

print("2^n ± 1 which are coprime to 2^N:", coprime_candidates)
print("Periods of coprime candidates:", coprime_periods)
print(f"Period of Input Sine Wave (Fin={Fin} Hz): {Fin_period:.6f} s")
print(f"Sampling Period (FS={FS} Hz): {FS_period:.6f} s")

# 時間軸の設定
T = 2  # 2秒間のデータを生成
time_data = np.linspace(0, T, 2 * FS, endpoint=False)

# 入力サイン波の生成
input_signal = np.sin(2 * np.pi * Fin * time_data)

# 0.5秒から1.5秒のデータをFSでサンプリング
sampling_start, sampling_end = 0.5, 1.5
sampling_mask = (time_data >= sampling_start) & (time_data <= sampling_end)
sampled_time = time_data[sampling_mask]
sampled_signal = input_signal[sampling_mask]

# プロット
fig, axs = plt.subplots(3, 1, figsize=(10, 12))

# 入力サイン波のプロット (2秒間)
axs[0].plot(time_data, input_signal, label="Input Sine Wave (17Hz)", color='blue')
axs[0].set_title("Input Sine Wave (2 seconds)")
axs[0].set_xlabel("Time [s]")
axs[0].set_ylabel("Amplitude")
axs[0].grid()
axs[0].legend()

# 0.5秒から1.5秒のFSサンプリングのプロット
axs[1].scatter(sampled_time, sampled_signal, color='red', label="Sampled Points (FS Sampling)")
axs[1].set_title("Sampled Signal (0.5s - 1.5s, FS Sampling)")
axs[1].set_xlabel("Time [s]")
axs[1].set_ylabel("Amplitude")
axs[1].grid()
axs[1].legend()

# スペクトルのプロット
freqs = np.fft.fftfreq(2 * FS, 1 / FS)
fft_values = np.fft.fft(input_signal) * 2 / (2 * FS)
power_spectrum = np.abs(fft_values) ** 2
Pow_dB = 10 * np.log10(power_spectrum[:FS])

axs[2].plot(freqs[:FS], Pow_dB, label="Power Spectrum", color="red")
axs[2].set_title("Power Spectrum of Input Sine Wave")
axs[2].set_xlabel("Frequency [Hz]")
axs[2].set_ylabel("Power [dB]")
axs[2].grid()
axs[2].legend()

plt.tight_layout()
plt.show()
