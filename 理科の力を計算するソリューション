import numpy as np
import matplotlib.pyplot as plt

# ベクトルの大きさと角度（角度は度で指定）
F1 = 3  # F1の大きさ（単位: kg）
F2 = 3  # F2の大きさ（単位: kg）
A_deg = 60  # Aの角度（度）
B_deg = 120  # Bの角度（度）

# 角度をラジアンに変換
A_rad = np.radians(A_deg)
B_rad = np.radians(B_deg)

# 各ベクトルを計算（複素数）
vec1 = F1 * np.exp(1j * A_rad)
vec2 = F2 * np.exp(1j * B_rad)
vec_sum = vec1 + vec2  # ベクトルの和

# プロットの準備
plt.figure(figsize=(8, 8))

# ベクトル F1 * e^(iA) のプロット
plt.quiver(0, 0, vec1.real, vec1.imag, angles='xy', scale_units='xy', scale=1, color='blue', label=f'F1 = {F1} kg, θ = {A_deg}°')

# ベクトル F2 * e^(iB) のプロット
plt.quiver(0, 0, vec2.real, vec2.imag, angles='xy', scale_units='xy', scale=1, color='green', label=f'F2 = {F2} kg, θ = {B_deg}°')

# ベクトルの和 F1 * e^(iA) + F2 * e^(iB) のプロット
plt.quiver(0, 0, vec_sum.real, vec_sum.imag, angles='xy', scale_units='xy', scale=1, color='red', label=f'F1 + F2 = {np.round(np.abs(vec_sum), 2)} kg, Resultant')

# プロット設定
plt.xlim(-5, 5)
plt.ylim(-5, 5)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.grid(color='gray', linestyle='--', linewidth=0.5)
plt.legend()
plt.xlabel('Real (kg)')
plt.ylabel('Imaginary (kg)')
plt.title('Vector Plot: F1 * e^(iA), F2 * e^(iB), and Their Sum')

# プロットを表示
plt.show()
